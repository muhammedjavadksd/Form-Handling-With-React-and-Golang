// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: form-manager/pkg/server/pb/form.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormClient is the client API for Form service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormClient interface {
	InsertForm(ctx context.Context, in *FormReq, opts ...grpc.CallOption) (*FormResponse, error)
}

type formClient struct {
	cc grpc.ClientConnInterface
}

func NewFormClient(cc grpc.ClientConnInterface) FormClient {
	return &formClient{cc}
}

func (c *formClient) InsertForm(ctx context.Context, in *FormReq, opts ...grpc.CallOption) (*FormResponse, error) {
	out := new(FormResponse)
	err := c.cc.Invoke(ctx, "/Form/InsertForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServer is the server API for Form service.
// All implementations must embed UnimplementedFormServer
// for forward compatibility
type FormServer interface {
	InsertForm(context.Context, *FormReq) (*FormResponse, error)
	mustEmbedUnimplementedFormServer()
}

// UnimplementedFormServer must be embedded to have forward compatible implementations.
type UnimplementedFormServer struct {
}

func (UnimplementedFormServer) InsertForm(context.Context, *FormReq) (*FormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertForm not implemented")
}
func (UnimplementedFormServer) mustEmbedUnimplementedFormServer() {}

// UnsafeFormServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServer will
// result in compilation errors.
type UnsafeFormServer interface {
	mustEmbedUnimplementedFormServer()
}

func RegisterFormServer(s grpc.ServiceRegistrar, srv FormServer) {
	s.RegisterService(&Form_ServiceDesc, srv)
}

func _Form_InsertForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).InsertForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Form/InsertForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).InsertForm(ctx, req.(*FormReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Form_ServiceDesc is the grpc.ServiceDesc for Form service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Form_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Form",
	HandlerType: (*FormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertForm",
			Handler:    _Form_InsertForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "form-manager/pkg/server/pb/form.proto",
}
